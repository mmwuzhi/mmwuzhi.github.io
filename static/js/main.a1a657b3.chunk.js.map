{"version":3,"sources":["components/CommentInput.js","reducers/comments.js","containers/CommentInput.js","components/Comment.js","components/CommentList.js","containers/CommentList.js","Clock.js","Card.js","containers/CommentApp.js","index.js"],"names":["CommentInput","props","state","username","content","this","textarea","focus","event","onUserNameInputBlur","target","value","setState","onSubmit","createdTime","Date","className","onBlur","handleUsernameBlur","bind","onChange","handleUsernameChange","ref","handleContentChange","onClick","handleSubmit","Component","prpoTypes","PropTypes","any","func","defaultProps","CommentInputContainer","_loadUsername","localStorage","getItem","setItem","comment","alert","comments","newComments","JSON","stringify","_saveUsername","handleSubmitComment","connect","dispatch","type","addComment","Comment","timeString","_updateTimeString","_timer","setInterval","clearInterval","time","dateTime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","duration","now","Math","round","max","replace","onDeleteComment","index","dangerouslySetInnerHTML","__html","_getProcessedContent","handleDeleteComment","CommentList","console","log","map","key","CommentListContainer","_loadComments","parse","initComments","slice","commentIndex","deleteComment","Clock","date","timer","style","fontSize","fontWeight","toLocaleTimeString","hour12","Card","float","children","CommentApp","isShowCommentList","isShowClock","width","marginRight","paddingBottom","handleShowOrCommentList","handleShowOrClock","store","createStore","action","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1a657b3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class CommentInput extends Component {\r\n  static prpoTypes = {\r\n    username: PropTypes.any,\r\n    onSubmit: PropTypes.func,\r\n    onUserNameInputBlur: PropTypes.func,\r\n  }\r\n\r\n  static defaultProps = {\r\n    username: '',\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      username: props.username,\r\n      content: '',\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.textarea.focus()\r\n  }\r\n\r\n  handleUsernameBlur(event) {\r\n    if (this.props.onUserNameInputBlur) {\r\n      this.props.onUserNameInputBlur(event.target.value)\r\n    }\r\n  }\r\n\r\n  handleUsernameChange(event) {\r\n    this.setState({\r\n      username: event.target.value,\r\n    })\r\n  }\r\n\r\n  handleContentChange(event) {\r\n    this.setState({\r\n      content: event.target.value,\r\n    })\r\n  }\r\n\r\n  handleSubmit() {\r\n    if (this.props.onSubmit) {\r\n      const { username, content } = this.state\r\n      this.props.onSubmit({\r\n        username,\r\n        content,\r\n        createdTime: +new Date(),\r\n      })\r\n    }\r\n    this.setState({ content: '' })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='comment-input'>\r\n        <div className='comment-field'>\r\n          <span className='comment-field-name'>ユーザ名：</span>\r\n          <div className='comment-field-input'>\r\n            <input\r\n              value={this.state.username}\r\n              onBlur={this.handleUsernameBlur.bind(this)}\r\n              onChange={this.handleUsernameChange.bind(this)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='comment-field'>\r\n          <span className='comment-field-name'>コメント：</span>\r\n          <div className='comment-field-input'>\r\n            <textarea\r\n              ref={(textarea) => (this.textarea = textarea)}\r\n              value={this.state.content}\r\n              onChange={this.handleContentChange.bind(this)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='comment-field-button'>\r\n          <button onClick={this.handleSubmit.bind(this)}>投稿</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","const INIT_COMMENTS = 'INIT_COMMENTS'\r\nconst ADD_COMMENT = 'ADD_COMMENT'\r\nconst DELETE_COMMENT = 'DELETE_COMMENT'\r\n\r\n// reducer\r\n// 好像没有名字的话就可以用任意名字来import\r\nexport default (state, action) => {\r\n  // 如果state不存在则新建一个为空的comments\r\n  if (!state) {\r\n    state = { comments: [] }\r\n  }\r\n  switch (action.type) {\r\n    // 直接return所以不需要break\r\n    // 这里return的state会变成新的state\r\n    case INIT_COMMENTS:\r\n      // 初始化评论\r\n      // TODO:大概这时候state.comments还不存在？所以action.comments传入的就是所有comment\r\n      return { comments: action.comments }\r\n    case ADD_COMMENT:\r\n      // 新增评论\r\n      return {\r\n        // 旧的state.comments和新传入的action.comment合并\r\n        comments: [...state.comments, action.comment],\r\n      }\r\n    case DELETE_COMMENT:\r\n      // 删除评论\r\n      return {\r\n        // 新建了一个删除特定下标内容的数组\r\n        // 相当于 将0~x-1和x+1~最后一个元素复制到新数组里\r\n        comments: [\r\n          ...state.comments.slice(0, action.commentIndex),\r\n          ...state.comments.slice(action.commentIndex + 1),\r\n        ],\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const initComments = (comments) => {\r\n  return { type: INIT_COMMENTS, comments }\r\n}\r\n\r\nexport const addComment = (comment) => {\r\n  return { type: ADD_COMMENT, comment }\r\n}\r\n\r\nexport const deleteComment = (commentIndex) => {\r\n  return { type: DELETE_COMMENT, commentIndex }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport CommentInput from '../components/CommentInput'\r\nimport { addComment } from '../reducers/comments'\r\n\r\n// CommentInputContainer\r\n// 负责用户名的加载、保存，评论的发布\r\nexport class CommentInputContainer extends Component {\r\n  static propTypes = {\r\n    comments: PropTypes.array,\r\n    onSubmit: PropTypes.func,\r\n  }\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = { username: '' }\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    // componentWillMount 生命周期中初始化用户名\r\n    this._loadUsername()\r\n  }\r\n\r\n  _loadUsername() {\r\n    // 从 LocalStorage 加载 username\r\n    // 然后可以在 render 方法中传给 CommentInput\r\n    const username = localStorage.getItem('username')\r\n    if (username) {\r\n      this.setState({ username })\r\n    }\r\n  }\r\n\r\n  _saveUsername(username) {\r\n    // 看看 render 方法的 onUserNameInputBlur\r\n    // 这个方法会在用户名输入框 blur 的时候的被调用，保存用户名\r\n    localStorage.setItem('username', username)\r\n  }\r\n\r\n  handleSubmitComment(comment) {\r\n    // 评论数据的验证\r\n    if (!comment) return\r\n    if (!comment.username) return alert('ユーザ名を入力してください！')\r\n    if (!comment.content) return alert('コメントを入力してください！')\r\n    // 新增评论保存到 LocalStorage 中\r\n    const { comments } = this.props\r\n    const newComments = [...comments, comment]\r\n    localStorage.setItem('comments', JSON.stringify(newComments))\r\n    // this.props.onSubmit 是 connect 传进来的\r\n    // 会 dispatch 一个 action 去新增评论\r\n    if (this.props.onSubmit) {\r\n      this.props.onSubmit(comment)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <CommentInput\r\n        username={this.state.username}\r\n        // onUserNameInputBlur在components的commentinput.js里\r\n        onUserNameInputBlur={this._saveUsername.bind(this)}\r\n        onSubmit={this.handleSubmitComment.bind(this)}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\n// 不懂就去看commentlist.js\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    comments: state.comments,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSubmit: (comment) => {\r\n      dispatch(addComment(comment))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CommentInputContainer)\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Comment extends Component {\r\n  static propTypes = {\r\n    comment: PropTypes.object.isRequired,\r\n    onDeleteComment: PropTypes.func,\r\n    index: PropTypes.number,\r\n  }\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = { timeString: '' }\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    this._updateTimeString()\r\n    this._timer = setInterval(this._updateTimeString.bind(this), 1000 * 60)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this._timer)\r\n  }\r\n\r\n  getDate(time) {\r\n    const dateTime = new Date(time)\r\n    return `${dateTime.getFullYear()}年${\r\n      dateTime.getMonth() + 1\r\n    }月${dateTime.getDate()}日 ${dateTime.getHours()}:${dateTime.getMinutes()}:${dateTime.getSeconds()}`\r\n  }\r\n\r\n  _updateTimeString() {\r\n    const comment = this.props.comment\r\n    const duration = (+Date.now() - comment.createdTime) / 1000\r\n    this.setState({\r\n      timeString:\r\n        duration > 60\r\n          ? duration > 60 * 60\r\n            ? duration > 60 * 60 * 24\r\n              ? this.getDate(comment.createdTime)\r\n              : `${Math.round(duration / (60 * 60))} 時間前`\r\n            : `${Math.round(duration / 60)} 分前`\r\n          : `${Math.round(Math.max(duration, 1))} 秒前`,\r\n    })\r\n  }\r\n\r\n  _getProcessedContent(content) {\r\n    return content\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;')\r\n      .replace(/\"/g, '&quot;')\r\n      .replace(/'/g, '&#039;')\r\n      .replace(/`([\\S\\s]+?)`/g, '<code>$1</code>')\r\n  }\r\n  handleDeleteComment() {\r\n    if (this.props.onDeleteComment) {\r\n      this.props.onDeleteComment(this.props.index)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { comment } = this.props\r\n    return (\r\n      <div className='comment'>\r\n        <div className='comment-user'>\r\n          <span>{comment.username}</span>：\r\n        </div>\r\n        <span className='comment-createdtime'>{this.state.timeString}</span>\r\n        <p\r\n          dangerouslySetInnerHTML={{\r\n            __html: this._getProcessedContent(comment.content),\r\n          }}\r\n        />\r\n        <span\r\n          onClick={this.handleDeleteComment.bind(this)}\r\n          className='comment-delete'\r\n        >\r\n          削除\r\n        </span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Comment\r\n","import React, { Component } from 'react'\r\nimport Comment from './Comment'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass CommentList extends Component {\r\n  static propTypes = {\r\n    comments: PropTypes.array,\r\n    onDeleteComment: PropTypes.func,\r\n  }\r\n\r\n  static defaultProps = {\r\n    comments: [],\r\n  }\r\n\r\n  constructor() {\r\n    super()\r\n    console.log('construct')\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    console.log('component will mount at comment list')\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('component did mount at comment list')\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log('component will unmount at comment list')\r\n  }\r\n\r\n  handleDeleteComment(index) {\r\n    if (this.props.onDeleteComment) {\r\n      this.props.onDeleteComment(index)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log('render')\r\n    return (\r\n      <div>\r\n        {this.props.comments.map((comment, index) => (\r\n          <Comment\r\n            comment={comment}\r\n            key={index}\r\n            index={index}\r\n            onDeleteComment={this.handleDeleteComment.bind(this)}\r\n          />\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CommentList\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport CommentList from '../components/CommentList'\r\nimport { initComments, deleteComment } from '../reducers/comments'\r\n\r\n// CommentListContainer\r\n// 一个 Smart 组件，负责评论列表数据的加载、初始化、删除评论\r\n// 沟通 CommentList 和 state\r\nexport class CommentListContainer extends Component {\r\n  static propTypes = {\r\n    comments: PropTypes.array,\r\n    initComments: PropTypes.func,\r\n    onDeleteComment: PropTypes.func,\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    // componentWillMount 生命周期中初始化评论\r\n    this._loadComments()\r\n  }\r\n\r\n  _loadComments() {\r\n    // 从 LocalStorage 中加载评论\r\n    let comments = localStorage.getItem('comments')\r\n    comments = comments ? JSON.parse(comments) : []\r\n    // this.props.initComments 是 connect 传进来的\r\n    // 可以帮我们把数据初始化到 state 里面去\r\n    this.props.initComments(comments)\r\n  }\r\n\r\n  handleDeleteComment(index) {\r\n    const { comments } = this.props\r\n    // props 是不能变的，所以这里新建一个删除了特定下标的评论列表\r\n    const newComments = [\r\n      ...comments.slice(0, index),\r\n      ...comments.slice(index + 1),\r\n    ]\r\n    // 保存最新的评论列表到 LocalStorage\r\n    localStorage.setItem('comments', JSON.stringify(newComments))\r\n    if (this.props.onDeleteComment) {\r\n      // this.props.onDeleteComment 是 connect 传进来的\r\n      // 会 dispatch 一个 action 去删除评论\r\n      this.props.onDeleteComment(index)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <CommentList\r\n        comments={this.props.comments}\r\n        onDeleteComment={this.handleDeleteComment.bind(this)}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\n// mapStateToProps和mapDispatchToProps的作用：\r\n// →将return的对象传递给store.state.allProps之后传给this.props.各对象\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    comments: state.comments,\r\n  }\r\n}\r\n\r\n// dispatch的作用:\r\n// →用传进来的action.type和action.data更新store.state\r\n//  并且遍历监听函数(在redux里)(暂时只有updateProps 作用是更新store.state.allProps)\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // 当从 LocalStorage 加载评论列表以后就会通过这个方法\r\n    // 将store.state更新为LocalStorage里加载的评论列表\r\n    // 并且遍历监听函数 将store.state里的对象传递给allProps\r\n    // allProps再传递给this.props.各对象\r\n    initComments: (comments) => {\r\n      dispatch(initComments(comments))\r\n    },\r\n    // 删除评论\r\n    onDeleteComment: (commentIndex) => {\r\n      dispatch(deleteComment(commentIndex))\r\n    },\r\n  }\r\n}\r\n\r\n// 将 CommentListContainer connect 到 store\r\n// 会把 comments、initComments、onDeleteComment 传给 CommentListContainer\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CommentListContainer)\r\n","import React, { Component } from 'react'\r\n\r\nclass Clock extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      date: new Date(),\r\n    }\r\n  }\r\n\r\n  // 组件的启动工作(执行时组件还未加载完成 所以类似动画的启动会放在DidMount里)\r\n  UNSAFE_componentWillMount() {\r\n    // ajax.get('http://json-api.com/user', (userData) => {\r\n    //   this.setState({userData})\r\n    // })\r\n    this.timer = setInterval(() => {\r\n      this.setState({ date: new Date() })\r\n    }, 1000)\r\n  }\r\n\r\n  // 组件销毁时的清理工作\r\n  componentWillUnmount() {\r\n    console.log('销毁timer')\r\n    clearInterval(this.timer)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ fontSize: '20px', fontWeight: 'bold' }}>\r\n        {this.state.date.toLocaleTimeString('ja-JP', { hour12: true })}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Clock\r\n","import React, { Component } from 'react'\r\n\r\nexport class Card extends Component {\r\n  render() {\r\n    return (\r\n      <div className='card' style={{float: 'left'}}>\r\n        <div className='card-content'>\r\n          {/* 这里的children 意思是放在<Card>中间</Card>的内容\r\n          有了this.props.children 就可以把Card tag当htmltag嵌套用了 */}\r\n          {this.props.children}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Card\r\n","import React, { Component } from 'react'\r\nimport CommentInput from './CommentInput'\r\nimport CommentList from './CommentList'\r\nimport Clock from '../Clock'\r\nimport Card from '../Card'\r\n\r\nexport default class CommentApp extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      isShowCommentList: true,\r\n      isShowClock: true,\r\n      style: {\r\n        width: '105px',\r\n        fontSize: '12px',\r\n        marginRight: '10px',\r\n      },\r\n    }\r\n  }\r\n\r\n  handleShowOrCommentList() {\r\n    this.setState({\r\n      isShowCommentList: !this.state.isShowCommentList,\r\n    })\r\n  }\r\n\r\n  handleShowOrClock() {\r\n    this.setState({\r\n      isShowClock: !this.state.isShowClock,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='wrapper'>\r\n        <CommentInput />\r\n        <Card className='card'>\r\n          {this.state.isShowClock ? <Clock /> : null}\r\n        </Card>\r\n        <div className='comment-field-button' style={{ paddingBottom: '20px' }}>\r\n          <button\r\n            onClick={this.handleShowOrCommentList.bind(this)}\r\n            style={this.state.style}\r\n          >\r\n            コメントを隠す\r\n          </button>\r\n          <button\r\n            onClick={this.handleShowOrClock.bind(this)}\r\n            style={{ fontSize: '12px' }}\r\n          >\r\n            時計を隠す\r\n          </button>\r\n        </div>\r\n        {this.state.isShowCommentList ? <CommentList /> : null}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport CommentApp from './containers/CommentApp'\nimport commentsReducer from './reducers/comments'\nimport './index.css'\n\nconst store = createStore(commentsReducer)\nReactDOM.render(\n  <Provider store={store}>\n    <CommentApp />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// 不知道是啥 可能是之前的一个什么实验\n\n// class Index extends Component {\n//   // 验证getChildContext返回的对象用\n//   static childContextTypes = {\n//     themeColor: PropTypes.string,\n//   }\n\n//   constructor() {\n//     super()\n//     this.state = { themeColor: 'gray' }\n//   }\n//   // 子孙组件通过getChildContext方法来获得祖先组件的context\n//   // 相当于 有getChildContext方法加上childContextTypes验证type\n//   // 子孙组件就可以获得祖先组件的指定的state值\n//   getChildContext() {\n//     return { themeColor: this.state.themeColor }\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Header />\n//         <Main />\n//       </div>\n//     )\n//   }\n// }\n\n// class Header extends Component {\n//   render() {\n//     return (\n//       <div>\n//         <h2>This is header</h2>\n//         <Title />\n//       </div>\n//     )\n//   }\n// }\n\n// class Main extends Component {\n//   render() {\n//     return (\n//       <div>\n//         <h2>This is main</h2>\n//         <Content />\n//       </div>\n//     )\n//   }\n// }\n\n// class Title extends Component {\n//   static contextTypes = {\n//     themeColor: PropTypes.string,\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         {/* 声明contextTypes之后就可以\n//         通过this.context.themeColor来获取祖先组件的state.themeColor的值 */}\n//         <h1 style={{ color: this.context.themeColor }}>Title</h1>\n//       </div>\n//     )\n//   }\n// }\n\n// class Content extends Component {\n//   static contextTypes = {\n//     themeColor: PropTypes.string,\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <h2 style={{ color: this.context.themeColor }}>Content</h2>\n//       </div>\n//     )\n//   }\n// }\n"],"sourceRoot":""}